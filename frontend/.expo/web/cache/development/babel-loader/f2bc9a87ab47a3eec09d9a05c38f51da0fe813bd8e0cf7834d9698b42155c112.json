{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nvar initialState = {\n  notes: [],\n  selectedNote: null,\n  loading: false,\n  error: null\n};\nvar noteSlice = createSlice({\n  name: 'note',\n  initialState: initialState,\n  reducers: {\n    setNotes: function setNotes(state, action) {\n      state.notes = action.payload;\n    },\n    addNote: function addNote(state, action) {\n      state.notes.unshift(action.payload);\n    },\n    updateNote: function updateNote(state, action) {\n      var index = state.notes.findIndex(function (note) {\n        return note.id === action.payload.id;\n      });\n      if (index !== -1) {\n        state.notes[index] = action.payload;\n      }\n    },\n    deleteNote: function deleteNote(state, action) {\n      state.notes = state.notes.filter(function (note) {\n        return note.id !== action.payload;\n      });\n    },\n    setSelectedNote: function setSelectedNote(state, action) {\n      state.selectedNote = action.payload;\n    },\n    setLoading: function setLoading(state, action) {\n      state.loading = action.payload;\n    },\n    setError: function setError(state, action) {\n      state.error = action.payload;\n    }\n  }\n});\nvar _noteSlice$actions = noteSlice.actions,\n  setNotes = _noteSlice$actions.setNotes,\n  addNote = _noteSlice$actions.addNote,\n  updateNote = _noteSlice$actions.updateNote,\n  deleteNote = _noteSlice$actions.deleteNote,\n  setSelectedNote = _noteSlice$actions.setSelectedNote,\n  setLoading = _noteSlice$actions.setLoading,\n  setError = _noteSlice$actions.setError;\nexport { setNotes, addNote, updateNote, deleteNote, setSelectedNote, setLoading, setError };\nexport default noteSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","notes","selectedNote","loading","error","noteSlice","name","reducers","setNotes","state","action","payload","addNote","unshift","updateNote","index","findIndex","note","id","deleteNote","filter","setSelectedNote","setLoading","setError","_noteSlice$actions","actions","reducer"],"sources":["C:/Users/86151/Desktop/智能生活助手/frontend/src/store/slices/noteSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\n// 便签图片类型定义\r\nexport interface NoteImage {\r\n  id: string;\r\n  url: string;\r\n  createdAt: string;\r\n}\r\n\r\n// 便签类型定义\r\nexport interface Note {\r\n  id: string;\r\n  title: string;\r\n  content: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  images: NoteImage[];\r\n  isPinned: boolean;\r\n  colorCode?: string;\r\n}\r\n\r\n// 状态类型定义\r\ninterface NoteState {\r\n  notes: Note[];\r\n  selectedNote: Note | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\n// 初始状态\r\nconst initialState: NoteState = {\r\n  notes: [],\r\n  selectedNote: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\n// 创建便签切片\r\nconst noteSlice = createSlice({\r\n  name: 'note',\r\n  initialState,\r\n  reducers: {\r\n    // 设置便签列表\r\n    setNotes: (state, action: PayloadAction<Note[]>) => {\r\n      state.notes = action.payload;\r\n    },\r\n    // 添加便签\r\n    addNote: (state, action: PayloadAction<Note>) => {\r\n      state.notes.unshift(action.payload);\r\n    },\r\n    // 更新便签\r\n    updateNote: (state, action: PayloadAction<Note>) => {\r\n      const index = state.notes.findIndex(note => note.id === action.payload.id);\r\n      if (index !== -1) {\r\n        state.notes[index] = action.payload;\r\n      }\r\n    },\r\n    // 删除便签\r\n    deleteNote: (state, action: PayloadAction<string>) => {\r\n      state.notes = state.notes.filter(note => note.id !== action.payload);\r\n    },\r\n    // 设置选中的便签\r\n    setSelectedNote: (state, action: PayloadAction<Note | null>) => {\r\n      state.selectedNote = action.payload;\r\n    },\r\n    // 设置加载状态\r\n    setLoading: (state, action: PayloadAction<boolean>) => {\r\n      state.loading = action.payload;\r\n    },\r\n    // 设置错误信息\r\n    setError: (state, action: PayloadAction<string | null>) => {\r\n      state.error = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\n// 导出actions\r\nexport const {\r\n  setNotes,\r\n  addNote,\r\n  updateNote,\r\n  deleteNote,\r\n  setSelectedNote,\r\n  setLoading,\r\n  setError,\r\n} = noteSlice.actions;\r\n\r\nexport default noteSlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AA8B7D,IAAMC,YAAuB,GAAG;EAC9BC,KAAK,EAAE,EAAE;EACTC,YAAY,EAAE,IAAI;EAClBC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAGD,IAAMC,SAAS,GAAGN,WAAW,CAAC;EAC5BO,IAAI,EAAE,MAAM;EACZN,YAAY,EAAZA,YAAY;EACZO,QAAQ,EAAE;IAERC,QAAQ,EAAE,SAAVA,QAAQA,CAAGC,KAAK,EAAEC,MAA6B,EAAK;MAClDD,KAAK,CAACR,KAAK,GAAGS,MAAM,CAACC,OAAO;IAC9B,CAAC;IAEDC,OAAO,EAAE,SAATA,OAAOA,CAAGH,KAAK,EAAEC,MAA2B,EAAK;MAC/CD,KAAK,CAACR,KAAK,CAACY,OAAO,CAACH,MAAM,CAACC,OAAO,CAAC;IACrC,CAAC;IAEDG,UAAU,EAAE,SAAZA,UAAUA,CAAGL,KAAK,EAAEC,MAA2B,EAAK;MAClD,IAAMK,KAAK,GAAGN,KAAK,CAACR,KAAK,CAACe,SAAS,CAAC,UAAAC,IAAI;QAAA,OAAIA,IAAI,CAACC,EAAE,KAAKR,MAAM,CAACC,OAAO,CAACO,EAAE;MAAA,EAAC;MAC1E,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBN,KAAK,CAACR,KAAK,CAACc,KAAK,CAAC,GAAGL,MAAM,CAACC,OAAO;MACrC;IACF,CAAC;IAEDQ,UAAU,EAAE,SAAZA,UAAUA,CAAGV,KAAK,EAAEC,MAA6B,EAAK;MACpDD,KAAK,CAACR,KAAK,GAAGQ,KAAK,CAACR,KAAK,CAACmB,MAAM,CAAC,UAAAH,IAAI;QAAA,OAAIA,IAAI,CAACC,EAAE,KAAKR,MAAM,CAACC,OAAO;MAAA,EAAC;IACtE,CAAC;IAEDU,eAAe,EAAE,SAAjBA,eAAeA,CAAGZ,KAAK,EAAEC,MAAkC,EAAK;MAC9DD,KAAK,CAACP,YAAY,GAAGQ,MAAM,CAACC,OAAO;IACrC,CAAC;IAEDW,UAAU,EAAE,SAAZA,UAAUA,CAAGb,KAAK,EAAEC,MAA8B,EAAK;MACrDD,KAAK,CAACN,OAAO,GAAGO,MAAM,CAACC,OAAO;IAChC,CAAC;IAEDY,QAAQ,EAAE,SAAVA,QAAQA,CAAGd,KAAK,EAAEC,MAAoC,EAAK;MACzDD,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACC,OAAO;IAC9B;EACF;AACF,CAAC,CAAC;AAGK,IAAAa,kBAAA,GAQHnB,SAAS,CAACoB,OAAO;EAPnBjB,QAAQ,GAAAgB,kBAAA,CAARhB,QAAQ;EACRI,OAAO,GAAAY,kBAAA,CAAPZ,OAAO;EACPE,UAAU,GAAAU,kBAAA,CAAVV,UAAU;EACVK,UAAU,GAAAK,kBAAA,CAAVL,UAAU;EACVE,eAAe,GAAAG,kBAAA,CAAfH,eAAe;EACfC,UAAU,GAAAE,kBAAA,CAAVF,UAAU;EACVC,QAAQ,GAAAC,kBAAA,CAARD,QAAQ;AACY,SAAAf,QAAA,EAAAI,OAAA,EAAAE,UAAA,EAAAK,UAAA,EAAAE,eAAA,EAAAC,UAAA,EAAAC,QAAA;AAEtB,eAAelB,SAAS,CAACqB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}